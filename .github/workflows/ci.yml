name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest mypy flake8 pytest-cov
    
    - name: Lint with flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: mypy app/ --ignore-missing-imports
    
    - name: Test with pytest
      run: pytest app/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      run: cd web && npm ci
    
    - name: Lint
      run: cd web && npm run lint
    
    - name: Type check
      run: cd web && npm run type-check
    
    - name: Test
      run: cd web && npm run test -- --coverage
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./web/coverage
        flags: frontend
        name: frontend-coverage
    
    - name: Build
      run: cd web && npm run build

  test-e2e:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow to fail for now
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      run: cd web && npm ci
    
    - name: Install Playwright browsers
      run: cd web && npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: cd web && npx playwright test --reporter=line
      env:
        E2E_TEST_EMAIL: ${{ secrets.E2E_TEST_EMAIL }}
        E2E_TEST_PASSWORD: ${{ secrets.E2E_TEST_PASSWORD }}
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: web/playwright-report/
        retention-days: 30

  sync-and-deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Sync app/ to api/ for production
      run: python scripts/sync_to_production.py
    
    - name: Validate sync
      run: python scripts/validate_sync.py
    
    - name: Build and push Docker images
      env:
        DOCKER_BUILDKIT: 1
      run: |
        docker build -t goalgpt-api:${{ github.sha }} .
        docker build -t goalgpt-web:${{ github.sha }} web/
        # Add your container registry push commands here
    
    # Uncomment when ready for deployment
    # - name: Deploy to production
    #   run: |
    #     # Add your deployment commands here
    #     echo "Deploying to production..."